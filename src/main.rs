/// Auto-generated by sea-orm
mod entities;

mod error;
mod poster;
mod relative_time;
mod render;
mod routes;

use axum_extra::routing::RouterExt;

#[derive(Clone)]
pub struct AppState {
    db: sea_orm::DatabaseConnection,
}

/// Return type for fallible routes.
type AppResult<T> = Result<T, error::AppError>;

const DATABASE_URL: &str = "sqlite:./database.db?mode=rwc";

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    use migration::MigratorTrait;

    // == DATABASE ==
    let db = sea_orm::Database::connect(DATABASE_URL).await?;
    migration::Migrator::up(&db, None).await?;

    let state = AppState { db };

    // == ROUTES ==
    let app = axum::Router::new()
        .typed_get(routes::root)
        .typed_get(routes::posts::get_posts)
        .typed_post(routes::posts::make_post)
        .typed_get(routes::replies::get_replies)
        .typed_post(routes::replies::make_reply)
        .typed_get(routes::replies::get_replies_lazy)
        .typed_get(routes::user::search_user)
        .nest_service("/static", tower_http::services::ServeDir::new("static"))
        .with_state(state);

    // == RUN ==
    axum::Server::bind(&"0.0.0.0:3000".parse().unwrap())
        .serve(app.into_make_service())
        .await?;

    Ok(())
}
